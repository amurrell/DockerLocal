#!/usr/bin/env bash

DEFAULT_PROXY_DATABASES_FILE="../../../ProxyLocal/databases.yml"
DEFAULT_DOCKER_DATABASES_FILE="../databases.yml"
PORT_FILE="../port"

P=$(sed -e 's#.*\-p=\([^\-]*\).*#\1#' <<< "$1$2$3$4$5$6$7$8$9")
N=$(sed -e 's#.*\-n=\([^\-]*\).*#\1#' <<< "$1$2$3$4$5$6$7$8$9")
C=$(sed -e 's#.*\-c=\([^\-]*\).*#\1#' <<< "$1$2$3$4$5$6$7$8$9")
D=$(sed -e 's#.*\-d=\([^\-]*\).*#\1#' <<< "$1$2$3$4$5$6$7$8$9")
A=$(sed -e 's#.*\-a=\([^\-]*\).*#\1#' <<< "$1$2$3$4$5$6$7$8$9")
I=$(sed -e 's#.*\-i=\([^\-]*\).*#\1#' <<< "$1$2$3$4$5$6$7$8$9")
F=$(sed -e 's#.*\-f=\([^\-]*\).*#\1#' <<< "$1$2$3$4$5$6$7$8$9")

if [ "$P" == "$1$2$3$4$5$6$7$8$9" ] && [ -f  "${PORT_FILE}" ]; then
    P=$(eval cat ${PORT_FILE});
fi

if [ "$N" == "$1$2$3$4$5$6$7$8$9" ] && [ "$P" == "$1$2$3$4$5$6$7$8$9" ]; then
    printf "Need to specify the port or domain (if using ProxyLocal) of the site when using this command. Eg. -p=3001 or -n=docker.example.com\n"
    exit 1
fi

if [ ! "$D" == "$1$2$3$4$5$6$7$8$9" ] && [ "$P" == "$1$2$3$4$5$6$7$8$9" ]; then
    printf "You need to specify a port to dump a db at this time.\n"
    exit 1
fi

if [ ! "$C" == "$1$2$3$4$5$6$7$8$9" ] && [ "$P" == "$1$2$3$4$5$6$7$8$9" ]; then
    printf "You need to specify a port to create a db at this time.\n"
    exit 1
fi

if [ ! "$I" == "$1$2$3$4$5$6$7$8$9" ] && [ "$P" == "$1$2$3$4$5$6$7$8$9" ]; then
    printf "You need to specify a port to import a file into a db at this time.\n"
    exit 1
fi

if [ ! "$F" == "$1$2$3$4$5$6$7$8$9" ] && [ "$P" == "$1$2$3$4$5$6$7$8$9" ]; then
    printf "You need to specify a port to import a db file at this time.\n"
    exit 1
fi

if [ ! "$I" == "$1$2$3$4$5$6$7$8$9" ] && [ "$F" == "$1$2$3$4$5$6$7$8$9" ]; then
    printf "You need to specify a file to import. Ex. ./site-up -i=db_name -f=file_path\n"
    exit 1
fi

if [ ! "$C" == "$1$2$3$4$5$6$7$8$9" ]; then
    DOCKER_NAME=$(echo "dockerlocal${P}")
    DB_CREATE_DB="CREATE DATABASE ${C};"
    DB_COMMAND="echo \"${DB_CREATE_DB}\" | mysql -u root -p1234"

    sudo docker exec ${DOCKER_NAME}_mysql_1 bash -c "${DB_COMMAND}"

    exit 1
fi

if [ ! "$I" == "$1$2$3$4$5$6$7$8$9" ] && [ ! "F" == "$1$2$3$4$5$6$7$8$9" ]; then
    DOCKER_NAME=$(echo "dockerlocal${P}")
    DB_COMMAND="mysql -u root -p1234 ${I} < /docker-entrypoint-initdb.d/${F}"

    sudo docker exec ${DOCKER_NAME}_mysql_1 bash -c "${DB_COMMAND}"

    exit 1
fi

if [ ! "$F" == "$1$2$3$4$5$6$7$8$9" ] && [ "$I" == "$1$2$3$4$5$6$7$8$9" ]  ; then
    DOCKER_NAME=$(echo "dockerlocal${P}")
    DB_COMMAND="mysql -u root -p1234 < /docker-entrypoint-initdb.d/${F}"

    sudo docker exec ${DOCKER_NAME}_mysql_1 bash -c "${DB_COMMAND}"

    exit 1
fi

if [ ! "$D" == "$1$2$3$4$5$6$7$8$9" ]; then

    if [ ! "$D" == "true" ]; then
	DOCKER_NAME=$(echo "dockerlocal${P}")
	DB_SAVE_FILE_INSIDE="/docker-entrypoint-initdb.d/${D}.sql.dump"
	DB_COMMAND="mysqldump -u root -p1234 ${D} > ${DB_SAVE_FILE_INSIDE}"

	if [ ! "$A" == "$1$2$3$4$5$6$7$8$9" ]; then
	    DB_COMMAND="mysqldump -u root -p1234 ${D} --add-drop-database -B > ${DB_SAVE_FILE_INSIDE}"
	fi

	sudo docker exec ${DOCKER_NAME}_mysql_1 bash -c "${DB_COMMAND}"
	exit 1
    fi


    if [ -f "${DEFAULT_PROXY_DATABASES_FILE}" ]; then
	DB_FILE="${DEFAULT_PROXY_DATABASES_FILE}"
    fi

    if [ -f "${DEFAULT_DOCKER_DATABASES_FILE}" ]; then
      DB_FILE="${DEFAULT_DOCKER_DATABASES_FILE}"
    fi

    if [ "$DB_FILE" ]; then
	declare -A DBS
	parse_yaml() {
	   local prefix=$2
	   local s='[[:space:]]*' w='[a-zA-Z0-9_]*' fs=$(echo @|tr @ '\034')
	   sed -ne "s|^\($s\)\($w\)$s:$s\"\(.*\)\"$s\$|\1$fs\2$fs\3|p" \
		-e "s|^\($s\)\($w\)$s:$s\(.*\)$s\$|\1$fs\2$fs\3|p"  $1 |
	   awk -F$fs '{
	      indent = length($1)/2;
	      vname[indent] = $2;
	      for (i in vname) {if (i > indent) {delete vname[i]}}
	      if (length($3) > 0) {
		 vn=""; for (i=0; i<indent; i++) {vn=(vn)(vname[i])("_")}
		 printf("%s[%s]=\"%s\"\n", "DBS", $2, $3);
	      }
	   }'
	}

	eval $(parse_yaml $DB_FILE)

	DB_NAME="${DBS[${P}]}"
	DB_HOST="${DBS['host']}"
	DB_USER="${DBS['user']}"
	DB_PASS="${DBS['pass']}"
	DB_PORT="${DBS['port']}"
	DB_SAVE_FILE="../data/dumps/${DB_NAME}.sql"

	if [ -z "$DB_HOST" ] || [ -z "$DB_NAME" ] || [ -z "$DB_PASS" ] || [ -z "$DB_USER" ] || [ -z "$DB_PORT" ]; then
	    INCOMPLETE_DB_CONFIG=true
	fi
    fi

    DOCKER_NAME=$(echo "dockerlocal${P}")
    DB_SAVE_FILE_INSIDE="/docker-entrypoint-initdb.d/${DB_NAME}.sql.dump"
    DB_COMMAND="mysqldump -u root -p1234 ${DB_NAME} > ${DB_SAVE_FILE_INSIDE}"

    sudo docker exec ${DOCKER_NAME}_mysql_1 bash -c "${DB_COMMAND}"

    exit 1
fi

DEFAULT_PROXY_DATABASES_FILE="../../../ProxyLocal/databases.yml"
DEFAULT_DOCKER_DATABASES_FILE="../databases.yml"

if [ ! -f "${DEFAULT_PROXY_DATABASES_FILE}" ] && [ ! -f "${DEFAULT_DOCKER_DATABASES_FILE}" ]; then
    printf "No databases.yml file exists in DockerLocal or ProxyLocal. Create one to use site-db\n"
    exit 1
fi

./site-up "$1$2$3$4$5$6$7$8$9" -r=true