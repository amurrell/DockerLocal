#!/usr/bin/env bash

# start with default port value and name
WEB_PORT=3000
DEFAULT_SITES_FILE="../../../ProxyLocal/sites.yml"

DEFAULT_ENV_FILE="../env-example.yml"
ENV_FILE_CUSTOM="../env-custom.yml"

DEFAULT_PHP_FILE="../php7-fpm.site.conf"
PHP_FILE_CUSTOM="../php7-fpm.site.custom.conf"

DEFAULT_PROXY_DATABASES_FILE="../../../ProxyLocal/databases.yml"
DEFAULT_DOCKER_DATABASES_FILE="../databases.yml"

# process arguments
while getopts ":pnsdkmhr" opt; do
    P=$(sed -e 's#.*\-p=\([^\-]*\).*#\1#' <<< "$1$2$3$4$5$6$7$8")
    N=$(sed -e 's#.*\-n=\([^\-]*\).*#\1#' <<< "$1$2$3$4$5$6$7$8")
    S=$(sed -e 's#.*\-s=\([^\-]*\).*#\1#' <<< "$1$2$3$4$5$6$7$8")
    D=$(sed -e 's#.*\-d=\([^\-]*\).*#\1#' <<< "$1$2$3$4$5$6$7$8")
    K=$(sed -e 's#.*\-k=\([^\-]*\).*#\1#' <<< "$1$2$3$4$5$6$7$8")
    M=$(sed -e 's#.*\-m=\([^\-]*\).*#\1#' <<< "$1$2$3$4$5$6$7$8")
    H=$(sed -e 's#.*\-h=\([^\-]*\).*#\1#' <<< "$1$2$3$4$5$6$7$8")
    R=$(sed -e 's#.*\-r=\([^\-]*\).*#\1#' <<< "$1$2$3$4$5$6$7$8")

    # p
    if [ "$opt" ] && [ ! "$P" == "$1$2$3$4$5$6$7$8" ]; then
        WEB_PORT=$P
    fi

    # n
    if [ "$opt" ] && [ ! "$N" == "$1$2$3$4$5$6$7$8" ]; then
        NAME=$N
    fi

    # s
    if [ "$opt" ] && [ ! "$S" == "$1$2$3$4$5$6$7$8" ]; then
        SITES_FILE=$S
    fi

    # d
    if [ "$opt" ] && [ ! "$D" == "$1$2$3$4$5$6$7$8" ]; then
        SITE_DOWN=$D
    fi

    # k
    if [ "$opt" ] && [ ! "$K" == "$1$2$3$4$5$6$7$8" ]; then
        NGROK=$K
    fi

    # m
    if [ "$opt" ] && [ ! "$M" == "$1$2$3$4$5$6$7$8" ]; then
        SITE_DB=$M
    fi

    # h
    if [ "$opt" ] && [ ! "$H" == "$1$2$3$4$5$6$7$8" ]; then
        SITE_SSH=$H
    fi

    # r
    if [ "$opt" ] && [ ! "$R" == "$1$2$3$4$5$6$7$8" ]; then
        REFRESH_DB=$R
    fi
done

# Allow short value "~" to indicate default sites file
if [ "$SITES_FILE" == "~" ]; then
    SITES_FILE="${DEFAULT_SITES_FILE}"
fi

# Stop if sites file is specified but doesn't exist at path

if [ "$SITES_FILE" ] && [ ! -f $SITES_FILE ]; then
    printf "Your sites.yml file doesn't exist.\n"
    exit 1
fi

# Complain that specifying a name, but not a sites file.

if [ "$NAME" ] && [ ! "$SITES_FILE" ] && [ ! -f "${DEFAULT_SITES_FILE}" ]; then
    printf "Consider specifying an existing sites file if using a domain. Using default port: 3000\n"
fi

if [ "$NAME" ] && [ ! "$SITES_FILE" ] && [ -f "${DEFAULT_SITES_FILE}" ]; then
    printf "Using default relative path for sites: ${DEFAULT_SITES_FILE}\n"
    SITES_FILE="${DEFAULT_SITES_FILE}"
fi

# Find the port using the sites.yml and project name

if [ "$SITES_FILE" ]; then

    declare -A SITES
    parse_yaml() {
       local prefix=$2
       local s='[[:space:]]*' w='[a-zA-Z0-9_]*' fs=$(echo @|tr @ '\034')
       sed -ne "s|^\($s\)\($w\)$s:$s\"\(.*\)\"$s\$|\1$fs\2$fs\3|p" \
            -e "s|^\($s\)\($w\)$s:$s\(.*\)$s\$|\1$fs\2$fs\3|p"  $1 |
       awk -F$fs '{
          indent = length($1)/2;
          vname[indent] = $2;
          for (i in vname) {if (i > indent) {delete vname[i]}}
          if (length($3) > 0) {
             vn=""; for (i=0; i<indent; i++) {vn=(vn)(vname[i])("_")}
             printf("%s[%s]=\"%s\"\n", "SITES", $2, $3);
          }
       }'
    }

    eval $(parse_yaml $SITES_FILE)

    for i in "${!SITES[@]}"
    do
        if [ "${SITES[$i]}" == "${NAME}" ]; then
            WEB_PORT="${i}"
        fi
    done
fi

if [ -f "${DEFAULT_PROXY_DATABASES_FILE}" ]; then
  DB_FILE="${DEFAULT_PROXY_DATABASES_FILE}"
fi

if [ -f "${DEFAULT_DOCKER_DATABASES_FILE}" ]; then
  DB_FILE="${DEFAULT_DOCKER_DATABASES_FILE}"
fi

if [ "$DB_FILE" ]; then
    declare -A DBS
    parse_yaml() {
       local prefix=$2
       local s='[[:space:]]*' w='[a-zA-Z0-9_]*' fs=$(echo @|tr @ '\034')
       sed -ne "s|^\($s\)\($w\)$s:$s\"\(.*\)\"$s\$|\1$fs\2$fs\3|p" \
            -e "s|^\($s\)\($w\)$s:$s\(.*\)$s\$|\1$fs\2$fs\3|p"  $1 |
       awk -F$fs '{
          indent = length($1)/2;
          vname[indent] = $2;
          for (i in vname) {if (i > indent) {delete vname[i]}}
          if (length($3) > 0) {
             vn=""; for (i=0; i<indent; i++) {vn=(vn)(vname[i])("_")}
             printf("%s[%s]=\"%s\"\n", "DBS", $2, $3);
          }
       }'
    }

    eval $(parse_yaml $DB_FILE)

    DB_NAME="${DBS[${WEB_PORT}]}"
    DB_HOST="${DBS['host']}"
    DB_USER="${DBS['user']}"
    DB_PASS="${DBS['pass']}"
    DB_PORT="${DBS['port']}"
    DB_SAVE_FILE="../data/dumps/${DB_NAME}.sql"

    if [ -z "$DB_HOST" ] || [ -z "$DB_NAME" ] || [ -z "$DB_PASS" ] || [ -z "$DB_USER" ] || [ -z "$DB_PORT" ]; then
	INCOMPLETE_DB_CONFIG=true
    fi
fi

if [ ! -f "$DB_SAVE_FILE" ] || [ "$REFRESH_DB" ]; then
    DO_DB_REFRESH=true
fi

# Use variables to create docker-compose custom

FILE="../docker-compose-custom.yml"
MYSQL_PORT=$((3306 + $WEB_PORT))
MEMCACHED_PORT=$((11211 + $WEB_PORT))
DOCKER_NAME=$(echo "dockerlocal${WEB_PORT}")

# Figure out env vars
if [ ! -f "../env.yml" ]; then
    ENV_FILE="${DEFAULT_ENV_FILE}"
fi

if [ -f "../env.yml" ]; then
    ENV_FILE="../env.yml"
fi

if [ -f "${ENV_FILE}" ]; then
    rm -f $ENV_FILE_CUSTOM
    cp $ENV_FILE $ENV_FILE_CUSTOM
    sed -i'.bak' "s/DATABASE_NAME/${DB_NAME}/g;" $ENV_FILE_CUSTOM
    sed -i'.bak' "s/DATABASE_HOST/${DOCKER_NAME}_mysql_1/g;" $ENV_FILE_CUSTOM
    sed -i'.bak' "s/DATABASE_PORT/${MYSQL_PORT}/g;" $ENV_FILE_CUSTOM
    rm "${ENV_FILE_CUSTOM}.bak"

    declare -A ENVS
    parse_yaml() {
       local prefix=$2
       local s='[[:space:]]*' w='[a-zA-Z0-9_]*' fs=$(echo @|tr @ '\034')
       sed -ne "s|^\($s\)\($w\)$s:$s\"\(.*\)\"$s\$|\1$fs\2$fs\3|p" \
            -e "s|^\($s\)\($w\)$s:$s\(.*\)$s\$|\1$fs\2$fs\3|p"  $1 |
       awk -F$fs '{
          indent = length($1)/2;
          vname[indent] = $2;
          for (i in vname) {if (i > indent) {delete vname[i]}}
          if (length($3) > 0) {
             vn=""; for (i=0; i<indent; i++) {vn=(vn)(vname[i])("_")}
             printf("%s[%s]=\"%s\"\n", "ENVS", $2, $3);
          }
       }'
    }

    eval $(parse_yaml $ENV_FILE_CUSTOM)

    # make the lines
    CONF=""
    for i in "${!ENVS[@]}"
    do
      VALUE="${ENVS[$i]}\n"
      SLASH=\
      CONF="${CONF}$(printf "env[$i]=${VALUE}")\n"
    done

    # add envs to custom php file

    rm -f $PHP_FILE_CUSTOM
    cp $DEFAULT_PHP_FILE $PHP_FILE_CUSTOM
    sed -i'.bak' "s/;ENV/${CONF}/" $PHP_FILE_CUSTOM
    rm "${PHP_FILE_CUSTOM}.bak"
fi


# Final checks for behavior

## SHUT DOWN
if [ "$SITE_DOWN" ]; then
    sudo docker-compose -p "${DOCKER_NAME}" -f "${FILE}" down
    exit 1
fi

## SSH into a container
if [ "$SITE_SSH" ]; then
    sudo docker exec -t -i "${DOCKER_NAME}"_"$SITE_SSH"_1 /bin/bash
    exit 1
fi

## NGROK
if [ "$NGROK" ]; then
    ngrok http 127.0.0.1:"${WEB_PORT}"
    exit 1
fi

## UP/BUILD
if [ "$WEB_PORT" == "3000" ]; then
    printf "No port specified, using default 3000. Next instance of DockerLocal will need a port specified: ./site-up -p=3001\n"
fi

rm $FILE
cp ../docker-compose.yml $FILE
sed -i'.bak' "s/WEB_PORT/${WEB_PORT}/g;" $FILE
sed -i'.bak' "s/MYSQL_PORT/${MYSQL_PORT}/g;" $FILE
sed -i'.bak' "s/MEMCACHED_PORT/${MEMCACHED_PORT}/g;" $FILE

sed -i'.bak' "s/DATABASE_NAME/${DB_NAME}/g;" $FILE
sed -i'.bak' "s/DATABASE_HOST/${DOCKER_NAME}_mysql_1/g;" $FILE
sed -i'.bak' "s/DATABASE_PORT/${MYSQL_PORT}/g;" $FILE
rm "${FILE}.bak"

## CHECK DB (First time use)
if [ "$INCOMPLETE_DB_CONFIG" ] && [ "$DO_DB_REFRESH" ]; then
    printf "Incomplete database configurations. Please check it if expecting a database with this site, and specify a domain or port!\n"
fi

if [ ! "$INCOMPLETE_DB_CONFIG" ] && [ "$DO_DB_REFRESH" ]; then
    DB_SAVE_FILE_INSIDE="/docker-entrypoint-initdb.d/${DB_NAME}.sql"
    DB_COMMAND="mysqldump -u ${DB_USER} -p${DB_PASS} --database ${DB_NAME} --port=${DB_PORT} -h ${DB_HOST} -B --add-drop-database > ${DB_SAVE_FILE_INSIDE}"
fi

sudo docker-compose -p "$DOCKER_NAME" -f "$FILE" down
sudo docker-compose -p "$DOCKER_NAME" -f "$FILE" up --build -d

if [ "$DB_COMMAND" ]; then
    sudo docker exec ${DOCKER_NAME}_mysql_1 bash -c "${DB_COMMAND}"
    printf "Restarting the mysql container to reload the db"
    sudo docker restart "${DOCKER_NAME}_mysql_1"
fi